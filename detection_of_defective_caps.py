"""detection of defective caps.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1THjlwCfEj3GPwgKAbKchsJnvqZIrGYKH
"""

import os
import torch
import torch.nn as nn
import torch.optim as optim
import torchvision.transforms as transforms
from torchvision import datasets
from torch.utils.data import DataLoader, Dataset, random_split
from PIL import Image
import matplotlib.pyplot as plt
import numpy as np

class BottleCapCNN(nn.Module):
    def __init__(self):
        super(BottleCapCNN, self).__init__()
        self.conv_layers = nn.Sequential(
            nn.Conv2d(3, 32, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(2, 2),

            nn.Conv2d(32, 64, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(2, 2),

            nn.Conv2d(64, 128, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(2, 2)
        )
        self.fc_layers = nn.Sequential(
            nn.Linear(128 * 28 * 28, 512),
            nn.ReLU(),
            nn.Dropout(0.5),
            nn.Linear(512, 1),
            nn.Sigmoid()  # Classification binaire
        )

    def forward(self, x):
        x = self.conv_layers(x)
        x = x.view(x.size(0), -1)  # Aplatir
        x = self.fc_layers(x)
        return x

import os
from torch.utils.data import Dataset
from PIL import Image

class BottleCapDataset(Dataset):
    def __init__(self, defective_dir, intact_dir, transform=None):
        self.images = []
        self.labels = []
        self.transform = transform

        for filename in os.listdir(defective_dir):
            if filename.endswith(('.jpg', '.png', '.jpeg')):
                self.images.append(os.path.join(defective_dir, filename))
                self.labels.append(1)

        for filename in os.listdir(intact_dir):
            if filename.endswith(('.jpg', '.png', '.jpeg')):
                self.images.append(os.path.join(intact_dir, filename))
                self.labels.append(0)

    def __len__(self):
        return len(self.images)

    def __getitem__(self, idx):
        image = Image.open(self.images[idx]).convert('RGB')
        if self.transform:
            image = self.transform(image)
        return image, self.labels[idx]

import torchvision.transforms as transforms
from torch.utils.data import DataLoader, random_split

transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.RandomHorizontalFlip(),
    transforms.RandomRotation(10),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])

# Définir les dossiers
defective_dir = '/content/drive/MyDrive/Defected bottle cap'
intact_dir = '/content/drive/MyDrive/Intact bottle cap'

dataset = BottleCapDataset(defective_dir, intact_dir, transform)

train_size = int(0.8 * len(dataset))
test_size = len(dataset) - train_size
train_dataset, test_dataset = random_split(dataset, [train_size, test_size])

train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=16, shuffle=False)

import torch.optim as optim

def train_model(model, criterion, optimizer, train_loader, num_epochs=10):
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model.to(device)

    for epoch in range(num_epochs):
        model.train()
        running_loss = 0.0
        correct = 0
        total = 0

        for images, labels in train_loader:
            images, labels = images.to(device), labels.to(device).float().view(-1, 1)

            optimizer.zero_grad()
            outputs = model(images)
            loss = criterion(outputs, labels)

            loss.backward()
            optimizer.step()

            predicted = (outputs > 0.5).float()
            total += labels.size(0)
            correct += (predicted == labels).sum().item()
            running_loss += loss.item()

        epoch_loss = running_loss / len(train_loader)
        accuracy = 100 * correct / total
        print(f"Epoch [{epoch+1}/{num_epochs}], Loss: {epoch_loss:.4f}, Accuracy: {accuracy:.2f}%")

def evaluate_model(model, test_loader):
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model.eval()
    model.to(device)

    correct = 0
    total = 0

    with torch.no_grad():
        for images, labels in test_loader:
            images, labels = images.to(device), labels.to(device).float().view(-1, 1)
            outputs = model(images)
            predicted = (outputs > 0.5).float()
            total += labels.size(0)
            correct += (predicted == labels).sum().item()

    accuracy = 100 * correct / total
    print(f"Test Accuracy: {accuracy:.2f}%")

model = BottleCapCNN()
criterion = nn.BCELoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

train_model(model, criterion, optimizer, train_loader, num_epochs=10)
evaluate_model(model, test_loader)

import cv2
import numpy as np
from PIL import Image

def detect_circle(frame):
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    circles = cv2.HoughCircles(gray, cv2.HOUGH_GRADIENT, dp=1.2, minDist=50,
                               param1=50, param2=30, minRadius=10, maxRadius=100)
    if circles is not None:
        circles = np.round(circles[0, :]).astype("int")
        return circles[0]  
    return None

def predict_with_webcam(model, transform):
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        print("Impossible d'accéder à la caméra.")
        return

    while True:
        ret, frame = cap.read()
        if not ret:
            break

        circle = detect_circle(frame)
        if circle is not None:
            x, y, r = circle
            cropped = frame[y-r:y+r, x-r:x+r]
            cropped = cv2.cvtColor(cropped, cv2.COLOR_BGR2RGB)
            pil_image = Image.fromarray(cropped).convert('RGB')

            input_tensor = transform(pil_image).unsqueeze(0)
            model.eval()
            with torch.no_grad():
                output = model(input_tensor)
                prob = torch.sigmoid(output).item()
                label = "Défectueux" if prob > 0.5 else "Intact"

            cv2.putText(frame, f"{label} ({prob:.2f})", (x-50, y-50),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
            cv2.circle(frame, (x, y), r, (0, 255, 0), 2)

        cv2.imshow("Détection de bouchon", frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

predict_with_webcam(model, transform)

torch.save(model.state_dict(), 'model.pth')

from google.colab import files
files.download('model.pth')